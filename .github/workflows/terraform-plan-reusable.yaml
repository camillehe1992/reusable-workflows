name: Terraform Plan Reusable Workflow

# the workflow is called in a caller workflow
on:
  workflow_call:
    outputs:
      exitcode:
        description: The terraform plan exit code
        value: ${{ jobs.plan.outputs.exitcode }}
    inputs:
      destroy:
        description: Whether to destroy resources
        required: false
        default: false
        type: boolean
      environment:
        description: Environment to run against
        type: string
        required: true
      nickname:
        description: Nickname of the project. Must be lowercase chars
        type: string
        required: true
      packages-directory:
        description: Where terraform script to build the packages (zip files)
        type: string
        required: false
      tf-version:
        description: Terraform version
        type: string
        required: false
        default: 1.8.0
      working-directory:
        description: Terraform working directory
        type: string
        required: true

env:
  # Variables & Secrets from GitHub Environment
  ROLE_TO_ASSUME: ${{ vars.ROLE_TO_ASSUME }}
  ROLE_SESSION_NAME: ${{ vars.ROLE_SESSION_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  # Inputs parameters
  DESTROY: ${{ inputs.destroy }}
  ENVIRONMENT: ${{ inputs.environment }}
  NICKNAME: ${{ inputs.nickname }}
  TF_VERSION: ${{ inputs.tf-version }}
  WORKING_DIRECTORY: ${{ inputs.working-directory }}
  # Variables for terraform scripts are prefixed with TF_VAR
  TF_VAR_aws_region: ${{ vars.AWS_REGION }}

permissions:
  id-token: write # This is required for requesting the JWT

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      exitcode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform version

          terraform init -reconfigure \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="key=$NICKNAME/$ENVIRONMENT/$AWS_REGION/terraform.tfstate"

      # Checks that all Terraform configuration files adhere to a canonical format
      # Will fail the build if not
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tf-plan
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          export exitcode=0

          if [ "$DESTROY" = "true" ]; then
            echo "This is a destroy plan"

            terraform plan -destroy -var-file $(pwd)/tf_$ENVIRONMENT.tfvars \
            -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          else
            terraform plan -var-file $(pwd)/tf_$ENVIRONMENT.tfvars \
            -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          fi

          echo exitcode = $exitcode

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else
            exit 0
          fi

      # Upload plan to artifacts
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIRECTORY }}/tfplan

      # Upload packages to artifacts
      - name: Publish Packages
        if: ${{ inputs.packages-directory }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ inputs.packages-directory }}

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "### Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
