name: Terraform Apply Reusable Workflow

# the workflow is called in a caller workflow
on:
  workflow_call:
    inputs:
      environment:
        description: Environment to run against
        type: string
        required: true
      nickname:
        description: Nickname of the project. Must be lowercase chars
        type: string
        required: true
      packages-directory:
        description: Where terraform script to build the packages (zip files)
        type: string
        required: false
      tf-version:
        description: Terraform version
        type: string
        required: false
        default: 1.4.2
      working-directory:
        description: Terraform working directory
        type: string
        required: true

env:
  # Variables & Secrets from GitHub Environment
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT: ${{ vars.AWS_ACCOUNT }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  # Inputs parameters
  ENVIRONMENT: ${{ inputs.environment }}
  NICKNAME: ${{ inputs.nickname }}
  PACKAGES_DIRECTORY: ${{ inputs.packages-directory }}
  TF_VERSION: ${{ inputs.tf-version }}
  WORKING_DIRECTORY: ${{ inputs.working-directory }}

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.TF_VERSION }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          terraform init -reconfigure \
          -backend-config="bucket=$STATE_BUCKET" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="key=$NICKNAME/$ENVIRONMENT/$AWS_REGION/terraform.tfstate"

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.PACKAGES_DIRECTORY }}

      - name: Re-Structure of Downloaded Artifacts
        working-directory: ${{ env.PACKAGES_DIRECTORY }}
        run: |
          ls -R
          find . -type f -name '*tfplan*' -delete
          for X in **/*; do [[ -e $X ]] && mv "$X" .; done
          find . -empty -type d -delete
          echo "Files in ${{ env.PACKAGES_DIRECTORY }} folder"
          ls -R

      # Terraform Apply
      - name: Terraform Apply
        id: tf-apply-string
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          TERRAFORM_OUTPUT=$(terraform apply -auto-approve tfplan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "### Terraform Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_OUTPUT" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Output to Task Summary
        env:
          SUMMARY: ${{ steps.tf-apply-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
